Microsoft (R) Macro Assembler Version 14.42.34436.0	    03/06/25 21:34:27
Assignment6.asm						     Page 1 - 1


				; Assignment #: 6
				; Program Description: Reversing an array twice in-place with index and indirect addressing
				; Author: Caden Pun (student: 2164581)
				; Creation Date: 3/6/25
				; Revisions: 0
				; Date:              Modified by:

				.386
				.model flat,stdcall
				.stack 4096
				ExitProcess PROTO, dwExitCode:dword

 00000000			.data
 00000000 00000001		testArray dword 1h, 2h, 3h, 4h, 5h, 6h, 7h, 8h, 9h, 10h
	   00000002
	   00000003
	   00000004
	   00000005
	   00000006
	   00000007
	   00000008
	   00000009
	   00000010
 00000028 00000000		count dword ?

 00000000			.code
 00000000			main proc

				; index addressing swap
 00000000  B9 00000005			mov ecx, LENGTHOF testArray / 2
 00000005  BE 00000000			mov esi, 0
 0000000A  BF 00000024			mov edi, SIZEOF testArray - TYPE testArray
 0000000F			L1:
 0000000F  8B 96 00000000 R		mov edx, testArray[esi]
 00000015  8B 9F 00000000 R		mov ebx, testArray[edi]

 0000001B  89 9E 00000000 R		mov testArray[esi], ebx
 00000021  89 97 00000000 R		mov testArray[edi], edx

 00000027  83 C6 04			add esi, TYPE testArray
 0000002A  83 EF 04			sub edi, TYPE testArray
 0000002D  E2 E0			loop L1

				; indirect addressing swap
 0000002F  B9 00000005			mov ecx, LENGTHOF testArray / 2
 00000034  BE 00000000 R		mov esi, OFFSET testArray
 00000039  BF 00000024 R		mov edi, OFFSET testArray + SIZEOF testArray - TYPE testArray
 0000003E			L2:
 0000003E  8B 16			mov edx, [esi]
 00000040  8B 1F			mov ebx, [edi]

 00000042  89 1E			mov [esi], ebx
 00000044  89 17			mov [edi], edx

 00000046  83 C6 04			add esi, TYPE testArray
 00000049  83 EF 04			sub edi, TYPE testArray
 0000004C  E2 F0			loop L2

				COMMENT !
					; nested loop swapping
					mov ecx, 2
					L1:
						mov esi, OFFSET testArray ; left pointer
						mov edi, OFFSET testArray + SIZEOF testArray - TYPE testArray ; right pointer

						mov count, ecx
						mov ecx, LENGTHOF testArray / 2 ; inner loop
					L2:
						mov edx, [esi] ; get left element
						mov ebx, [edi] ; get right element

						mov [edi], edx ; put in right
						mov [esi], ebx ; put in left

						add esi, TYPE testArray
						sub edi, TYPE testArray
						loop L2

						mov ecx, count
						loop L1
				!

					invoke ExitProcess,0
 0000004E  6A 00	   *	    push   +000000000h
 00000050  E8 00000000 E   *	    call   ExitProcess
 00000055			main endp
				end main
Microsoft (R) Macro Assembler Version 14.42.34436.0	    03/06/25 21:34:27
Assignment6.asm						     Symbols 2 - 1




Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 DWord	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000002C DWord	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000055 DWord	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000055 Public STDCALL
  L1 . . . . . . . . . . . . . .	L Near	 0000000F _TEXT	
  L2 . . . . . . . . . . . . . .	L Near	 0000003E _TEXT	


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
count  . . . . . . . . . . . . .	DWord	 00000028 _DATA	
testArray  . . . . . . . . . . .	DWord	 00000000 _DATA	

	   0 Warnings
	   0 Errors
